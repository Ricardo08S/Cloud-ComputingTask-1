[0m[1mdata.template_file.user_data[1]: Reading...[0m[0m
[0m[1mdata.template_file.network_config[1]: Reading...[0m[0m
[0m[1mdata.template_file.user_data[0]: Reading...[0m[0m
[0m[1mdata.template_file.network_config[0]: Reading...[0m[0m
[0m[1mdata.template_file.network_config[0]: Read complete after 0s [id=e0e5206f92480f942aac1826f5b7ad1276c290b8ea0d5791f7818a6d78a72a57][0m
[0m[1mdata.template_file.network_config[1]: Read complete after 0s [id=e0e5206f92480f942aac1826f5b7ad1276c290b8ea0d5791f7818a6d78a72a57][0m
[0m[1mdata.template_file.user_data[0]: Read complete after 0s [id=fadb8609e49f7917b93cdcef29f1701381271323d8380c981fe97d2f20f9e34a][0m
[0m[1mdata.template_file.user_data[1]: Read complete after 0s [id=fadb8609e49f7917b93cdcef29f1701381271323d8380c981fe97d2f20f9e34a][0m

OpenTofu used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

OpenTofu will perform the following actions:

[1m  # libvirt_cloudinit_disk.commoninit[0][0m will be created
[0m  [32m+[0m[0m resource "libvirt_cloudinit_disk" "commoninit" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "commoninit-0.iso"
      [32m+[0m[0m network_config = <<-EOT
            version: 2
              ethernets:
                ens3:
                  dhcp4: true
        EOT
      [32m+[0m[0m pool           = "default"
      [32m+[0m[0m user_data      = <<-EOT
            #cloud-config
              runcmd:
                - sed -i '/PermitRootLogin/d' /etc/ssh/sshd_config
                - echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
                - systemctl restart sshd
              ssh_pwauth: true
              disable_root: false
              chpasswd:
                list: |
                  rics:rics
                expire: false
              users:
                - name: rics
                  gecos: rics
                  groups:
                    - sudo
                  sudo:
                    - ALL=(ALL) NOPASSWD:ALL
                  home: /home/rics
                  shell: /bin/bash
                  lock_passwd: false
                  ssh_authorized_keys:
                    - ssh-rsa AAAA.....Keys.....
        EOT
    }

[1m  # libvirt_cloudinit_disk.commoninit[1][0m will be created
[0m  [32m+[0m[0m resource "libvirt_cloudinit_disk" "commoninit" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "commoninit-1.iso"
      [32m+[0m[0m network_config = <<-EOT
            version: 2
              ethernets:
                ens3:
                  dhcp4: true
        EOT
      [32m+[0m[0m pool           = "default"
      [32m+[0m[0m user_data      = <<-EOT
            #cloud-config
              runcmd:
                - sed -i '/PermitRootLogin/d' /etc/ssh/sshd_config
                - echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
                - systemctl restart sshd
              ssh_pwauth: true
              disable_root: false
              chpasswd:
                list: |
                  rics:rics
                expire: false
              users:
                - name: rics
                  gecos: rics
                  groups:
                    - sudo
                  sudo:
                    - ALL=(ALL) NOPASSWD:ALL
                  home: /home/rics
                  shell: /bin/bash
                  lock_passwd: false
                  ssh_authorized_keys:
                    - ssh-rsa AAAA.....Keys.....
        EOT
    }

[1m  # libvirt_domain.ubuntu[0][0m will be created
[0m  [32m+[0m[0m resource "libvirt_domain" "ubuntu" {
      [32m+[0m[0m arch        = (known after apply)
      [32m+[0m[0m autostart   = (known after apply)
      [32m+[0m[0m cloudinit   = (known after apply)
      [32m+[0m[0m emulator    = (known after apply)
      [32m+[0m[0m fw_cfg_name = "opt/com.coreos/config"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m machine     = (known after apply)
      [32m+[0m[0m memory      = 1024
      [32m+[0m[0m name        = "mesin-1"
      [32m+[0m[0m qemu_agent  = false
      [32m+[0m[0m running     = true
      [32m+[0m[0m type        = "kvm"
      [32m+[0m[0m vcpu        = 1

      [32m+[0m[0m console {
          [32m+[0m[0m source_host    = "127.0.0.1"
          [32m+[0m[0m source_service = "0"
          [32m+[0m[0m target_port    = "0"
          [32m+[0m[0m target_type    = "serial"
          [32m+[0m[0m type           = "pty"
        }
      [32m+[0m[0m console {
          [32m+[0m[0m source_host    = "127.0.0.1"
          [32m+[0m[0m source_service = "0"
          [32m+[0m[0m target_port    = "1"
          [32m+[0m[0m target_type    = "virtio"
          [32m+[0m[0m type           = "pty"
        }

      [32m+[0m[0m disk {
          [32m+[0m[0m scsi      = false
          [32m+[0m[0m volume_id = (known after apply)
          [32m+[0m[0m wwn       = (known after apply)
        }

      [32m+[0m[0m graphics {
          [32m+[0m[0m autoport       = true
          [32m+[0m[0m listen_address = "127.0.0.1"
          [32m+[0m[0m listen_type    = "address"
          [32m+[0m[0m type           = "spice"
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m addresses      = (known after apply)
          [32m+[0m[0m hostname       = "mesin-1"
          [32m+[0m[0m mac            = (known after apply)
          [32m+[0m[0m network_id     = (known after apply)
          [32m+[0m[0m network_name   = "default"
          [32m+[0m[0m wait_for_lease = true
        }
    }

[1m  # libvirt_domain.ubuntu[1][0m will be created
[0m  [32m+[0m[0m resource "libvirt_domain" "ubuntu" {
      [32m+[0m[0m arch        = (known after apply)
      [32m+[0m[0m autostart   = (known after apply)
      [32m+[0m[0m cloudinit   = (known after apply)
      [32m+[0m[0m emulator    = (known after apply)
      [32m+[0m[0m fw_cfg_name = "opt/com.coreos/config"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m machine     = (known after apply)
      [32m+[0m[0m memory      = 1024
      [32m+[0m[0m name        = "mesin-2"
      [32m+[0m[0m qemu_agent  = false
      [32m+[0m[0m running     = true
      [32m+[0m[0m type        = "kvm"
      [32m+[0m[0m vcpu        = 1

      [32m+[0m[0m console {
          [32m+[0m[0m source_host    = "127.0.0.1"
          [32m+[0m[0m source_service = "0"
          [32m+[0m[0m target_port    = "0"
          [32m+[0m[0m target_type    = "serial"
          [32m+[0m[0m type           = "pty"
        }
      [32m+[0m[0m console {
          [32m+[0m[0m source_host    = "127.0.0.1"
          [32m+[0m[0m source_service = "0"
          [32m+[0m[0m target_port    = "1"
          [32m+[0m[0m target_type    = "virtio"
          [32m+[0m[0m type           = "pty"
        }

      [32m+[0m[0m disk {
          [32m+[0m[0m scsi      = false
          [32m+[0m[0m volume_id = (known after apply)
          [32m+[0m[0m wwn       = (known after apply)
        }

      [32m+[0m[0m graphics {
          [32m+[0m[0m autoport       = true
          [32m+[0m[0m listen_address = "127.0.0.1"
          [32m+[0m[0m listen_type    = "address"
          [32m+[0m[0m type           = "spice"
        }

      [32m+[0m[0m network_interface {
          [32m+[0m[0m addresses      = (known after apply)
          [32m+[0m[0m hostname       = "mesin-2"
          [32m+[0m[0m mac            = (known after apply)
          [32m+[0m[0m network_id     = (known after apply)
          [32m+[0m[0m network_name   = "default"
          [32m+[0m[0m wait_for_lease = true
        }
    }

[1m  # libvirt_volume.base[0m will be created
[0m  [32m+[0m[0m resource "libvirt_volume" "base" {
      [32m+[0m[0m format = "qcow2"
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = "base.qcow2"
      [32m+[0m[0m pool   = "default"
      [32m+[0m[0m size   = (known after apply)
      [32m+[0m[0m source = "/tmp/ubuntu-20.04.qcow2"
    }

[1m  # libvirt_volume.ubuntu20-qcow2[0][0m will be created
[0m  [32m+[0m[0m resource "libvirt_volume" "ubuntu20-qcow2" {
      [32m+[0m[0m base_volume_id = (known after apply)
      [32m+[0m[0m format         = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "ubuntu20-0.qcow2"
      [32m+[0m[0m pool           = "default"
      [32m+[0m[0m size           = 5368709120
    }

[1m  # libvirt_volume.ubuntu20-qcow2[1][0m will be created
[0m  [32m+[0m[0m resource "libvirt_volume" "ubuntu20-qcow2" {
      [32m+[0m[0m base_volume_id = (known after apply)
      [32m+[0m[0m format         = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "ubuntu20-1.qcow2"
      [32m+[0m[0m pool           = "default"
      [32m+[0m[0m size           = 5368709120
    }

[1m  # null_resource.cache_image[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "cache_image" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 8 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m db_server_ip  = (known after apply)
  [32m+[0m[0m web_server_ip = (known after apply)
[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Note: You didn't use the -out option to save this plan, so OpenTofu can't
guarantee to take exactly these actions if you run "tofu apply" now.
